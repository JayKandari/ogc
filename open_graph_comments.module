<?php

/**
 * @file
 * Open Graph Comment primary module file.
 *
 * It contains alteration in default comment to add open graph data from url
 * link added in drupal comments.
 */

/**
 * Function to get formatted view with og tags from link.
 */
function open_graph_comments_display_comment($url) {
  $tags = array();
  $request_data = drupal_http_request($url);
  // Check for positive response code.
  if ($request_data->code == 200) {
    $html = new DOMDocument();
    @$html->loadHTML($request_data->data);

    // Get all meta tags and loop through them.
    foreach ($html->getElementsByTagName('meta') as $meta) {
      // If the property attribute of the meta tag contains og:.
      if (strpos($meta->getAttribute('property'), 'og:') !== FALSE) {
        // Assign the value from content attribute to $meta_og_img
        $tags[$meta->getAttribute('property')] = $meta->getAttribute('content');
      }
    }
  }

  return $tags;
}

/**
 * Implements hook_comment_view_alter().
 */
function open_graph_comments_comment_view_alter(&$build) {
  $open_graph_status = variable_get('comment_open_graph_' . $build['#node']->type, FALSE);
  // Check for open graph status for comment node type.
  if ($open_graph_status) {
    $url = '';
    $title = '';
    $img = '';
    $desc = '';
    $ogc_output = '';
    $matches = array();
    $build['#attached']['css'] = array(
      drupal_get_path('module', 'open_graph_comments') . '/css/open_graph_comments.css',
    );

    $comment_body = $build['#comment']->comment_body[LANGUAGE_NONE][0]['value'];
    // The Regular Expression filter
    $reg_exUrl = "/(http|https|ftp|ftps)\:\/\/[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,3}(\/\S*)?/";

    // Check if there is a url in the text.
    preg_match($reg_exUrl, $comment_body, $matches);

    // Check if string is valid url or not.
    if (isset($matches[0]) && filter_var($matches[0], FILTER_VALIDATE_URL)) {
      // Get open graph data from cache, if not then set cache.
      $og_tags = open_graph_comments_cache_data($matches[0], $build['#comment']->cid, $build['#comment']->language);
    }

    // Get variables from opengraph metatags.
    if (isset($og_tags) && !empty($og_tags)) {
      if (isset($og_tags['og:url'])) {
        $url = $og_tags['og:url'];
      }
      if (isset($og_tags['og:title'])) {
        $title = $og_tags['og:title'];
      }
      if (isset($og_tags['og:image'])) {
        $img = $og_tags['og:image'];
      }
      if (isset($og_tags['og:description'])) {
        $desc = $og_tags['og:description'];
      }
      // Get themed output.
      $ogc_output = theme('open_graph_comments_template', array(
          'url' => $url,
          'title' => $title,
          'img' => $img,
          'desc' => $desc,
        )
      );
    }

    $build['comment_body'][0]['#markup'] .= $ogc_output;
  }
}

/**
 * Function to get and set comment open graph data.
 * @param $url
 *  URL to get open graph data.
 * @param $cid
 *  cid of comment.
 * @param $lid
 *  Language code.
 * @return
 *  Open graph data.
 */
function open_graph_comments_cache_data($url, $cid, $lid) {
  $og_tags = array();
  // Cache open graph data for particular comment.
  if ($cache = cache_get('open_graph_comments_' . $cid . '_' . $lid)) {
    $og_tags = $cache->data;
  }
  else {
    $og_tags = open_graph_comments_display_comment($url);
    cache_set('open_graph_comments_' . $cid . '_' . $lid, $og_tags, 'cache');
  }
  return $og_tags;
}

/**
 * Implements hook_theme().
 */
function open_graph_comments_theme($existing, $type, $theme, $path) {
  $themes = array(
    'open_graph_comments_template' => array(
      'template' => 'open_graph_comments',
      'variables' => array(
        'url' => NULL,
        'title' => NULL,
        'img' => NULL,
        'desc' => NULL,
      ),
    ),
  );
  return $themes;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function open_graph_comments_form_node_type_form_alter(&$form, &$form_state) {
  // Set open graph setting to content types.
  if (isset($form['type'])) {
    $form['comment']['comment_open_graph'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable open graph.'),
      '#description' => t('Display open graph for link provided in comments.'),
      '#default_value' => variable_get('comment_open_graph_' . $form['#node_type']->type, FALSE),
    );
  }
}
